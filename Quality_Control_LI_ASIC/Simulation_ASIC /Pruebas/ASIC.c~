#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <stddef.h>
#include <omp.h>

#define THRESHOLD 50  //Threshold elegido en mVoltios
#define SIGNAL_OUTPUT 3000 //Pulso asignado a la señal de salida en mV
#define PHE_CONV 10.0 //Factor de conversión entre fotoelectrones y mV

#define FWHM 3.5 //Anchura a media altura en mV
#define PI 3.14159265358979323846

int main (void)
{
  int i, j, k; // Contadores que voy a necesitar 
  
  double t; //Tiempo 
  double sigma;
  double PHE[7]; //Numero de fotoelectrones que recibe cada fotomultiplicador
  double input_signal[7][200] = {0}; //Señal de entrada en cada uno de los 7 Inputs 
  double replic_signal[7][3][200]; //Cada señal de entrada se triplica
  double sum[3][200]; //Suma resultado de cada sumador
  int switch_status[7][3]; // Estado de los 21 Interruptores
    

  int out[3][200]; // Resultado de la comparación de la suma de los 3 sumadores, puede ser o 0 o 3 V 
  int output_trigger; // Decision final del trigger, o 0 o 1 

  FILE *fp[7], *fadd[3], *fcomp[3], *fphe, *fswitch; // Archivos que genera el programa: las señales de entrada, las salidas de los sumadores y la saluda del comparador. 
  
  // En un fichero phe.txt estan los datos de los fotoelectrones que recibe cada PMT. 

  fphe = fopen("phe.txt", "r");
 
  if (fphe == NULL)
     fprintf(stderr, "Couldn't open file");

  i = 0;
  while (!feof(fphe))
    {
      fscanf(fphe,"%lf ", &PHE[i]);
      i++;
    }
  fclose(fphe);

  fswitch = fopen("switches.txt", "r");

  if (fswitch == NULL)
    fprintf(stderr,"Couldn't open file");

  for (i=0; i<7; i++)
    {
    for (j=0; j<3; j++)
      {   
	fscanf(fswitch, "%d", &switch_status[i][j]);
	
      }
    }
 

  fclose(fswitch);
  



 /* -------------------GENERADOR DE LAS 7 SEÑALES INICIALES DE LOS 7 PMT---------------- */

  fp[0]=fopen("data1.txt","w");
  fp[1]=fopen("data2.txt","w");
  fp[2]=fopen("data3.txt","w");
  fp[3]=fopen("data4.txt","w");
  fp[4]=fopen("data5.txt","w");
  fp[5]=fopen("data6.txt","w");
  fp[6]=fopen("data7.txt","w");

  for (i=0; i<7; i++)
    if (fp[i] == NULL)
      fprintf(stderr, "Couldn't open file");

  //Pulso gaussiano cuya amplitud es el numero de Fotoelectrones recogido * 10 mV

  sigma = FWHM / (2.0*sqrt(log(2.0))); //Computa el valor de sigma para las gaussianas

  for (j=0; j<7; j++){
    t=-10.0;
    for (i=0; i < 200; i++){
      t = t + 0.1;
      input_signal[j][i] = PHE[j]* PHE_CONV * (1.0/(sigma*sqrt(2.0*PI))*exp(-pow(t,2)/(2.0*(pow(sigma, 2)))));
      
      fprintf (fp[j], "%f %f \n",t, input_signal[j][i]);
    
    }
  } 
  for (i=0; i<7; i++)
   fclose(fp[i]);





    
  /* ----------------------------INTERRUPTORES----------------------------*/

  //La señal que llega de cada PMT se triplica y pasa por los interruptores. En principio, la configuración de interruptores debe ser tal que solo se dejen pasar tres de las 7 señales por cada interruptor. 

  for (i=0; i < 7; i++){
    for (k=0; k<200; k++){
      for (j=0; j<3; j++){
      
	if (switch_status[i][j]== 0) // Si el interruptor está apagado, la señal de salida replicada es 0.
	  replic_signal[i][j][k]= 0; // Si está encendido, la señal de salida es igual a la original. 
	else
	  replic_signal[i][j][k]=input_signal[i][k];
           
      }
    }
  }

  /* -----------------SUMADORES------------------------------------*/

  //Ahora cada señal que sale de un interruptor va a su sumador correspondiente, los interruptores [i,1] van al sumador [1], los [i,2] al [2]... El resultado de la suma van a ser tres señales resultado de la suma de las combinaciones de señales iniciales que han dejado pasar los interruptores. 
  
  fadd[0]=fopen("adder1.txt","w");
  fadd[1]=fopen("adder2.txt","w");
  fadd[2]=fopen("adder3.txt","w");
  
   for (i=0; i<3; i++)
    if (fadd[i] == NULL)
      fprintf(stderr, "Couldn't open file");
  
  for (k=0; k<200; k++)
    for(j=0; j<3; j++)
      for(i=0; i<7; i++)

	sum[j][k]+=replic_signal[i][j][k];

  for (j=0; j<3; j++){
    t=-10.0;
    for (k=0;k<200; k++){
      t=t+0.1;

      fprintf(fadd[j],"%f %f\n",t, sum[j][k]);
    }
  }

  for (i=0; i<3; i++)
   fclose(fadd[i]);

  /* ------------------COMPARADORES------------------*/

  // Hay que comparar cada señal sumada con un valor de threshold y asignarle un valor de pulso de señal cuadrada, que en este caso serán 3V (3000 mV). El comparador asigna valor 0 a todos los puntos de la señal que esten por debajo del THRESHOLD, y valor 3 V a todos los puntos que estén por encima del valor del THRESHOLD. 
 
  fcomp[0]=fopen("comp1.txt","w");
  fcomp[1]=fopen("comp2.txt","w");
  fcomp[2]=fopen("comp3.txt","w");
  
  for (i=0; i<3; i++)
    if (fcomp[i] == NULL)
      fprintf(stderr, "Couldn't open file");

  for (j=0; j<200; j++){
    for (i=0; i<3; i++){

      if (sum[i][j] > THRESHOLD){
	out[i][j]=SIGNAL_OUTPUT;
      }
      else {
	out[i][j]=0;
      }     
    }
  }

  for (i=0; i<3; i++){
    t=-10.0;
    for (j=0; j<200; j++){
      t=t+0.1;
      fprintf(fcomp[i], "%f %i\n",t, out[i][j]);
    }
  }

  for (i=0; i<3; i++)
    fclose(fcomp[i]);

  /* -------------------------------- PUERTA OR -------------------------------------*/

  //La puerta OR decide si se activa el trigger L1 de la cámara. Toma los outputs del comparador y si alguno de los tres h  a superado el valor de THRESHOLD, el trigger se activa. 
  
  for (i=0; i<200 ; i++){
    if (out[0][i] || out[1][i] || out[2][i]){  
      output_trigger=1; 
     
      fprintf (stderr,"Triggered!\n");
      break;
    }
    else {
      output_trigger=0;       
    }
  }

  if (output_trigger == 0)
    fprintf (stderr,"Nothing interesring...\n");

  }



  
